geom_ribbon(aes(ymin=lci, ymax=uci, fill=method, colour=method), alpha=0.4, linetype=0) +
labs(y=expression(paste(""^q, "D"))) +
theme(legend.background = element_rect(fill="gray90", size=0.5, linetype="dotted"),
legend.title = element_text(size=15)) +
theme(legend.text=element_text(size=15),
axis.text=element_text(size=15),
axis.title=element_text(size=15)) +
scale_fill_manual(values = tseng_color)
pic.tmp[[i+1]] <- p
}
pic.tmp[[1]] <- p1
h <- ggplot(tmp, aes(x=q))
p1 <- h + geom_line(aes(x=q, y=est, fill=name, colour=name), size=1.2) +
geom_ribbon(aes(ymin=lci, ymax=uci, fill=name, colour=name),
alpha = 0.4, linetype = 0) +
labs(y=expression(paste(""^q, "D"))) +
theme(legend.background = element_rect(fill="gray90", size=.5, linetype="dotted")) +
scale_fill_manual(values = tseng_color)
p1
runApp()
runApp()
runApp()
dataset
seq_along(dataset)
name
name.ch
runA
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hsize <- length(name.ch)
hsize
hsize*400
runApp()
runApp()
runApp()
runApp()
runApp()
dataset
runApp()
runApp()
runApp()
runApp()
runApp()
runA
runApp()
runApp()
comdata
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
name
pic.tmp <- list()
for (i in seq_along(name)){
dodge <- position_dodge(width=0.1)
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(comdata[[i]], aes(x=q))
p <- h + geom_point(aes(y=est, colour=method), size=5) +
geom_errorbar(limits, width=0.05, size=2, position=dodge) +
labs(y=expression(paste(""^q, "D"))) +
scale_fill_manual(values = tseng_color) +
scale_color_manual(values = tseng_color)
pic.tmp[[i]] <- p
}
pic.tmp[[1]]
pic.tmp[[2]]
tmpq
tmpq=2
for (i in seq_along(name)){
comdata[[i]] <- as.data.frame(cbind(rbind(mp[[name.ch[i]]]$obs, mp[[name.ch[i]]]$pro),
method=rep(c("mle", "pro"), each=length(tmpq))))
comdata[[i]]$q <- tmpq
comdata[[i]]$est <- as.numeric(as.character(comdata[[i]]$est))
comdata[[i]]$sd <- as.numeric(as.character(comdata[[i]]$sd))
comdata[[i]]$lci <- as.numeric(as.character(comdata[[i]]$lci))
comdata[[i]]$uci <- as.numeric(as.character(comdata[[i]]$uci))
}
pic.tmp <- list()
for (i in seq_along(name)){
dodge <- position_dodge(width=0.1)
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(comdata[[i]], aes(x=q))
p <- h + geom_point(aes(y=est, colour=method), size=5) +
geom_errorbar(limits, width=0.05, size=2, position=dodge) +
labs(y=expression(paste(""^q, "D"))) +
scale_fill_manual(values = tseng_color) +
scale_color_manual(values = tseng_color)
#           h <- ggplot(comdata[[i]], aes(x=q))
pic.tmp[[i]] <- p
}
pic.tmp
name.ch <- as.character(name)
for (i in seq_along(name)){
comdata[[i]] <- as.data.frame(cbind(rbind(mp[[name.ch[i]]]$obs, mp[[name.ch[i]]]$pro),
method=rep(c("mle", "pro"), each=length(tmpq))))
comdata[[i]]$q <- tmpq
comdata[[i]]$est <- as.numeric(as.character(comdata[[i]]$est))
comdata[[i]]$sd <- as.numeric(as.character(comdata[[i]]$sd))
comdata[[i]]$lci <- as.numeric(as.character(comdata[[i]]$lci))
comdata[[i]]$uci <- as.numeric(as.character(comdata[[i]]$uci))
}
comdata
mp
runApp()
runApp()
runApp()
library(devtools)
install_github('ChaoHill','ddd7975')
library(ChaoHill)
library(ggplot2)
library(googleVis)
library(shiny)
runApp()
runApp()
runA
library(devtools)
install_github('ChaoHill','ddd7975')
library(ChaoHill)
library(ggplot2)
library(googleVis)
library(shiny)
runApp()
runApp()
runApp()
text="Girdled 46 22 17 15 15  9  8  6  6  4  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1"
temp <- lapply(readLines(textConnection(text)), function(x) scan(text = x, what = 'char'))
out <- list()
out.name <- 0
for (i in seq_along(temp)){
out.name[i] <- temp[[i]][1]
out[[i]] <- as.numeric(temp[[i]][-1])
}
names(out) <- t(data.frame(out.name))
out
out.name <- names(out)
if(is.na(names(out)[1]) == TRUE){
dat <- paste("No data")
dat
}else{
dat <- out
for(i in seq_along(out)){
dat[[i]] <- out.name[i]
}
dat
}
esttab <- lapply(dataset, function(x){
temp <- ChaoHill(dat=x, "incidence", 1, 1, 0.1, B=3, conf=0.95, detail=T)
tt <- rbind(temp$EST, temp$SD, temp$LCI, temp$UCI)
m <- matrix(cbind(t(tt)[, c(1, 3, 5, 7)], t(tt)[, c(2, 4, 6, 8)]), ncol=8)
rownames(m) <- paste("q =", seq(1, 1, 0.1))
return(m)
})
selected <- 1
dataset <- list()
# input$dataset : dat
for(i in seq_along(input$dataset)){
selected[i] <- which(names(out) == input$dataset[i])
}
for(i in seq_along(dat)){
selected[i] <- which(names(out) == dat[i])
}
for(i in seq_along(selected)){
k <- selected[i]
dataset[[i]] <- out[[k]]
}
names(dataset) <- input$dataset
dataset
names(dataset) <- dat
esttab <- lapply(dataset, function(x){
temp <- ChaoHill(dat=x, "incidence", 1, 1, 0.1, B=2, conf=0.95, detail=T)
tt <- rbind(temp$EST, temp$SD, temp$LCI, temp$UCI)
m <- matrix(cbind(t(tt)[, c(1, 3, 5, 7)], t(tt)[, c(2, 4, 6, 8)]), ncol=8)
rownames(m) <- paste("q =", seq(1, 1, 0.1))
return(m)
})
estta
esttab
mp <- lapply(esttab, function(x){
l <- list()
obs=x[, 1:4]; pro=x[, 5:8]
rname <- paste("q =", seq(1, 1, 0.1))
obs <- matrix(c(rname, obs), ncol=5)
pro <- matrix(c(rname, pro), ncol=5)
colnames(obs) <- colnames(pro) <- c("q", "est", "sd", "lci", "uci")
l <- list(obs=obs, pro=pro)
return(l)
})
mp
tseng_color <- c("red", "green", "blue", "yellow", "orange")
name <- dat
name
temptable <- mp[[name]]$pro
mp[[name]]
name
name.ch <- as.character(name)
temptable <- mp[[name]]$pro
mp[[name.ch]]$pro
?do.call
mp
tseng_color <- c("red", "green", "blue", "yellow", "orange")
dataset
name
name.ch
temptable <- mp[[name.ch]]$pro
tmpq
tmpq <- seq(1, 1, 0.1)
tmp <- as.data.frame(temptable)
tmp$q <- tmpq
tmp$est <- as.numeric(as.character(tmp$est))
tmp$sd <- as.numeric(as.character(tmp$sd))
tmp$lci <- as.numeric(as.character(tmp$lci))
tmp$uci <- as.numeric(as.character(tmp$uci))
tmp
text=  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1 \nLogged 88 22 16 15 13 10  8  8  7  7  7  5  4  4  4  3  3  3  3  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1"
text="Girdled 46 22 17 15 15  9  8  6  6  4  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1 \nLogged 88 22 16 15 13 10  8  8  7  7  7  5  4  4  4  3  3  3  3  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1"
temp <- lapply(readLines(textConnection(text)), function(x) scan(text = x, what = 'char'))
out <- list()
out.name <- 0
for (i in seq_along(temp)){
out.name[i] <- temp[[i]][1]
out[[i]] <- as.numeric(temp[[i]][-1])
}
names(out) <- t(data.frame(out.name))
out
out <- loadPaste()
out.name <- names(out)
if(is.na(names(out)[1]) == TRUE){
dat <- paste("No data")
dat
}else{
dat <- out
for(i in seq_along(out)){
dat[[i]] <- out.name[i]
}
dat
}
selected <- 1
dataset <- list()
for(i in seq_along(dat)){
selected[i] <- which(names(out) == dat[i])
}
for(i in seq_along(selected)){
k <- selected[i]
dataset[[i]] <- out[[k]]
}
names(dataset) <- input$dataset
names(dataset) <- dat
esttab <- lapply(dataset, function(x){
temp <- ChaoHill(dat=x, "incidence", 1, 1, 0.1, B=2, conf=0.95, detail=T)
tt <- rbind(temp$EST, temp$SD, temp$LCI, temp$UCI)
m <- matrix(cbind(t(tt)[, c(1, 3, 5, 7)], t(tt)[, c(2, 4, 6, 8)]), ncol=8)
rownames(m) <- paste("q =", seq(1, 1, 0.1))
return(m)
})
mp <- lapply(esttab, function(x){
l <- list()
obs=x[, 1:4]; pro=x[, 5:8]
rname <- paste("q =", seq(1, 1, 0.1))
obs <- matrix(c(rname, obs), ncol=5)
pro <- matrix(c(rname, pro), ncol=5)
colnames(obs) <- colnames(pro) <- c("q", "est", "sd", "lci", "uci")
l <- list(obs=obs, pro=pro)
return(l)
})
runApp()
temptable
tmpq
protable <- NULL
for(i in 1:length(unlist(name))){
protable <- rbind(protable, mp[[name[i]]]$pro)
}
protable
name.ch <- as.character(name)
name
name <- dat
name
name.ch
name.ch <- as.character(name)
name.ch
protable <- NULL
for(i in 1:length(unlist(name))){
protable <- rbind(protable, mp[[name[i]]]$pro)
}
length(unlist(name))
i
mp
mp[[name[i]]]
name
for(i in 1:length(unlist(name))){
protable <- rbind(protable, mp[[name.ch[i]]]$pro)
}
protable
tmp <- as.data.frame(cbind(protable, dataset=rep(name, each=length(tmpq))))
tmp
tmp
protable <- NULL
for(i in 1:length(unlist(name))){
protable <- rbind(protable, mp[[name.ch[i]]]$pro)
}
name
name.ch
tmpq
protable <- NULL
for(i in 1:length(unlist(name))){
protable <- rbind(protable, mp[[name.ch[i]]]$pro)
}
protable
rep(name, each=length(tmpq))
tmp <- as.data.frame(cbind(protable, dataset=rep(name.ch, each=length(tmpq))))
tmp
tmp$q <- tmpq
tmp$est <- as.numeric(as.character(tmp$est))
tmp$sd <- as.numeric(as.character(tmp$sd))
tmp$lci <- as.numeric(as.character(tmp$lci))
tmp$uci <- as.numeric(as.character(tmp$uci))
tmp
h <- ggplot(tmp, aes(colour=dataset, y=est, x=dataset))
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.05, size=2)
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp, aes(colour=dataset, y=est, x=dataset))
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.05, size=2)
p
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.1, size=2)
p
p <- h + geom_point(size=5) + geom_errorbar(limits, width=1, size=2)
p
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.8, size=2)
p
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.8, size=2) +
scale_fill_manual(values = tseng_color) +
scale_color_manual(values = tseng_color) +
labs(y=expression(paste(""^q, "D")))
p
q
qq=1
p <- h + geom_point(size=5) + geom_errorbar(limits, width=0.8, size=2) +
scale_fill_manual(values = tseng_color) +
scale_color_manual(values = tseng_color) +
labs(y=expression(paste(""^q, "D"))) +
ggtitle(paste("q =", qq))
p
runApp()
runApp()
tmp
runA
runApp()
name.ch
seq_along(name)
for (i in seq_along(name)){
comdata[[i]] <- as.data.frame(cbind(rbind(mp[[name.ch[i]]]$obs, mp[[name.ch[i]]]$pro),
method=rep(c("mle", "pro"), each=length(tmpq))))
comdata[[i]]$q <- tmpq
comdata[[i]]$est <- as.numeric(as.character(comdata[[i]]$est))
comdata[[i]]$sd <- as.numeric(as.character(comdata[[i]]$sd))
comdata[[i]]$lci <- as.numeric(as.character(comdata[[i]]$lci))
comdata[[i]]$uci <- as.numeric(as.character(comdata[[i]]$uci))
}
mp
comdata <- list()
name.ch <- as.character(name)
for (i in seq_along(name)){
comdata[[i]] <- as.data.frame(cbind(rbind(mp[[name.ch[i]]]$obs, mp[[name.ch[i]]]$pro),
method=rep(c("mle", "pro"), each=length(tmpq))))
comdata[[i]]$q <- tmpq
comdata[[i]]$est <- as.numeric(as.character(comdata[[i]]$est))
comdata[[i]]$sd <- as.numeric(as.character(comdata[[i]]$sd))
comdata[[i]]$lci <- as.numeric(as.character(comdata[[i]]$lci))
comdata[[i]]$uci <- as.numeric(as.character(comdata[[i]]$uci))
}
comdata
pic.tmp <- list()
i=1
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(comdata[[i]], aes(x=method, y=est))
p <- h + geom_point(aes(y=est, colour=method, x=method), size=5) +
geom_errorbar(limits, width=0.7, size=2, position=position_dodge(width=0.90),
colour=c(tseng_color[1], tseng_color[2]))
p
runApp()
runApp()
name.ch
runApp()
tmp
temptable <- mp[[name.ch]]$pro
temptable
mp
name.ch
temptable <- mp[[name.ch[1]]]$pro
temptable
tmpq
tmp <- as.data.frame(temptable)
tmp$q <- tmpq
tmp$est <- as.numeric(as.character(tmp$est))
tmp$sd <- as.numeric(as.character(tmp$sd))
tmp$lci <- as.numeric(as.character(tmp$lci))
tmp$uci <- as.numeric(as.character(tmp$uci))
tmp
runApp()
tmp2 <- as.data.frame(cbind(tmp, name.ch))
tmp2
temptable <- mp[[name.ch]]$pro
tmpq <- seq(input$orderq[1], input$orderq[2], 0.1)
tmp <- as.data.frame(temptable)
tmp$q <- tmpq
tmp$est <- as.numeric(as.character(tmp$est))
tmp$sd <- as.numeric(as.character(tmp$sd))
tmp$lci <- as.numeric(as.character(tmp$lci))
tmp$uci <- as.numeric(as.character(tmp$uci))
tmp
temptable <- mp[[name.ch]]$pro
temptable
mp
mp[[name.ch]]$pro
name.ch
temptable <- mp[[name.ch[1]]]$pro
tmp <- as.data.frame(temptable)
tmp$q <- tmpq
tmp$est <- as.numeric(as.character(tmp$est))
tmp$sd <- as.numeric(as.character(tmp$sd))
tmp$lci <- as.numeric(as.character(tmp$lci))
tmp$uci <- as.numeric(as.character(tmp$uci))
tmp2 <- as.data.frame(cbind(tmp, name.ch))
tmp2
tmp
tmp2 <- as.data.frame(cbind(tmp, name.ch[1]))
tmp2
limits <- aes(ymax = uci, ymin = lci)
tmp2 <- as.data.frame(cbind(tmp, dataset = name.ch))
tmp2 <- as.data.frame(cbind(tmp, dataset = name.ch[1]))
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp, aes(y=est, x=dataset))
p <- h + geom_point(size=5, color="red") +
geom_errorbar(limits, width=0.05, size=2, color="red") +
labs(y=expression(paste(""^q, "D"))) +
scale_fill_discrete(name="method", labels="Proposed")
p
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp, aes(y=est, x=dataset))
p <- h + geom_point(size=5, color="red")
p
h <- ggplot(tmp2, aes(y=est, x=dataset))
p <- h + geom_point(size=5, color="red")
p
runApp()
runApp()
tmp2
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp2, aes(y=est, x=dataset))
p <- h + geom_point(size=5, color=dataset) +
geom_errorbar(limits, width=0.7, size=2, color=dataset)
p
h + geom_line(size=5, color=dataset)
h <- ggplot(tmp2, aes(y=est, x=q))
h + geom_line(size=5, color=dataset)
p <- h + geom_point(size=5, color=dataset) +
geom_errorbar(limits, width=0.7, size=2, color=dataset)
p
tmpT <- as.data.frame(cbind(tmp, id=rep("Proposed", length(tmpq))))
tmpT
tmp2
tmp2 <- as.data.frame(cbind(tmp, dataset = name.ch, id = "Proposed"))
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp2, aes(y=est, x=dataset))
h + geom_point(size=5, color=id)
tmp2 <- as.data.frame(cbind(tmp, dataset = name.ch, id = "Proposed"))
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp2, aes(y=est, x=dataset))
p <- h + geom_point(size=5, color=id) +
geom_errorbar(limits, width=0.7, size=2, color=dataset)
tmp2 <- as.data.frame(cbind(tmp, dataset = name.ch, id = "Proposed"))
tmp2
tmp
tmp
tmp2 <- as.data.frame(cbind(tmp, dataset=name.ch, id="Proposed"))
tmp2
name.ch
tmp2 <- as.data.frame(cbind(tmp, dataset=name.ch[1], id="Proposed"))
tmp2
limits <- aes(ymax = uci, ymin = lci)
h + geom_point(size=5, color=id, x=dataset)
h <- ggplot(tmp2, aes(y=est, x=dataset))
h + geom_point(size=5, color=id, x=dataset)
cbind(tmp, dataset=name.ch, id="Proposed")
tmp2
tmp2
limits <- aes(ymax = uci, ymin = lci)
h <- ggplot(tmp2, aes(x=dataset))
h <- ggplot(tmp2, aes(x=dataset, y=est))
h + geom_point(aes(color=id, x=dataset), size=5)
runApp()
h + geom_point(aes(color=id, x=dataset), size=5) +
geom_errorbar(limits, width=0.7, size=2)
h + geom_point(aes(color=id, x=dataset), size=5) +
geom_errorbar(limits, width=0.7, size=2) +
scale_color_manual(values = "red")
h + geom_point(aes(color=id, x=dataset), size=5) +
geom_errorbar(limits, width=0.7, size=2) +
scale_fill_manual(values = "red")
h + geom_point(aes(color=id, x=dataset), size=5) +
geom_errorbar(limits, width=0.7, size=2) +
scale_fill_manual(values = c("red", "black"))
h + geom_point(aes(color=id, x=dataset), size=5) +
geom_errorbar(limits, width=0.7, size=2) +
scale_fill_manual(values = c("red", "red"))
runApp()
runApp()
